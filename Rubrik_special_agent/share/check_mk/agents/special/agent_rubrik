#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# 2023, marcus.klein@iteratio.com

import argparse
import sys
from typing import NoReturn, Optional

import cmk.utils.password_store
import requests

cmk.utils.password_store.replace_passwords()


sections = [
    "cluster_system_status",
    "cluster_compliance_status",
    "node_status",
    "node_disk_status",
    "node_hardware_health",
]


class RubrikRestApi:
    def __init__(
        self,
        hostname: str,
        username: str,
        password: str,
        verify: Optional[bool] = False,
    ):
        self.base_rubrik_url = f"https://{hostname}/api/"
        self.session = None
        self.verify = verify
        if not self.verify:
            requests.packages.urllib3.disable_warnings()
        self.username = username
        self.password = password
        self.token = None

    def login(self) -> NoReturn:
        self.session = requests.Session()
        self.session.headers["accept"] = "application/json"
        try:
            response = self.session.post(
                url=f"{self.base_rubrik_url}v1/service_account/session",
                json={"serviceAccountId": self.username, "secret": self.password},
                verify=self.verify,
            )
        except Exception as e:
            sys.stderr.write(f"Request error: {e}")
            sys.exit(1)

        # response = {
        #     "cause": None,
        #     "errorType": "user_error",
        #     "message": "Max of 10 API Tokens reached.",
        # }

        if response.json().get("errorType") == "user_error":
            sys.stderr.write(f"Login error: {response.json().get('message')}")
            sys.exit(1)

        self.token = response.json().get("token")
        self.session.headers.update(
            {
                "Authorization": f"Bearer {self.token}",
            }
        )

    def delete_token(self) -> int:
        if self.token:
            try:
                r = self.session.delete(
                    url=f"{self.base_rubrik_url}v1/session/me", verify=self.verify
                )
                # print(f"Token successful deleted: status code: {r.status_code}")
            except Exception as e:
                # sys.stderr.write(f"Could not delete token delete status code: {r.status_code}")
                sys.stderr.write(f"Token delete error: {e}")
                return 1
        return 0

    def get_endpoint_data(self, endpoint: str) -> dict:
        try:
            r = self.session.get(url=f"{self.base_rubrik_url}{endpoint}", verify=self.verify)
        except Exception as e:
            print(f"Request error: {e}")

        try:
            data = r.json()
        except:
            data = {}

        return data


def parse_arguments(argv=None) -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--user", help="User Name for API Calls", required=True)
    parser.add_argument("--secret", help="Secret of User", required=True)
    parser.add_argument("--hostname", help="Hostname to make calls to", required=True)
    parser.add_argument(
        "--verify_ssl",
        help="Disable SSL certificate verification",
        action="store_true",
    )
    parser.add_argument(
        "--sections",
        type=lambda s: s.split(","),
        default=sections,
        help=f"Sections to query. This is a comma separated list of {', '.join(sections)}. Default is to query all sections.",
    )
    return parser.parse_args(argv)


def main(argv=None) -> int:
    args = parse_arguments(argv)
    api = RubrikRestApi(
        username=args.user,
        password=args.secret,
        verify=args.verify_ssl,
        hostname=args.hostname,
    )

    api.login()

    # Cluster Data
    # System Status
    if "cluster_system_status" in args.sections:
        print("<<<rubrik_cluster_system_status:sep(0)>>>")
        print(api.get_endpoint_data("internal/cluster/me/system_status"))

    # Compliance Summary (Snapshots)
    if "cluster_compliance_status" in args.sections:
        print("<<<rubrik_cluster_compliance_24_hours:sep(0)>>>")
        print(api.get_endpoint_data("internal/report/compliance_summary_24_hours"))

    # Cluster Nodes Data
    # Node Data
    if "node_status" in args.sections:
        for node in api.get_endpoint_data("internal/cluster/me/node").get("data", []):
            print(f"<<<<{node.get('id')}>>>>")
            print("<<<rubrik_node:sep(0)>>>")
            print(node)
            print("<<<<>>>>")

    # Node Disks
    if "node_disk_status" in args.sections:
        for disk in api.get_endpoint_data("internal/cluster/me/disk").get("data", []):
            print(f"<<<<{disk.get('nodeId', '').split(':::')[-1]}>>>>")
            print("<<<rubrik_node_disk:sep(0)>>>")
            print(disk)
            print("<<<<>>>>")

    # Node Hardware Health
    if "node_hardware_health" in args.sections:
        for node, health in api.get_endpoint_data("internal/cluster/me/hardware_health").items():
            print(f"<<<<{node}>>>>")
            print("<<<rubrik_node_hardware_health:sep(0)>>>")
            print(health)
            print("<<<<>>>>")

    return api.delete_token()


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
