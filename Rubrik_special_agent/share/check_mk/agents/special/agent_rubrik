#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# 2023, marcus.klein@iteratio.com

import argparse
import sys
import requests

requests.packages.urllib3.disable_warnings()

import cmk.utils.password_store

cmk.utils.password_store.replace_passwords()

from pprint import pprint as pp


def parse_arguments(argv=None):
    parser = argparse.ArgumentParser(description=__doc__)
    defaults = (
        ("hostname", "sadea100100.de.obi.net", "Hostname"),
        ("user", None, "User"),
        ("secret", None, "Pass"),
        ("verify_ssl", False, "Disable SSL certificate verification"),
    )

    opts_with_help = (t for t in defaults if len(t) == 3)
    for key, default, help_str in opts_with_help:
        if default is not None:
            help_str += " Default: %s" % default
        parser.add_argument("--%s" % key, default=default, help=help_str)
    return parser.parse_args(argv)


class RubrikRestApi:
    def __init__(
        self,
        hostname,
        verify=False,
        username=None,
        password=None,
        protocol="https",
    ):
        self.base_rubrik_url = f"{protocol}://{hostname}/api/"
        self.session = None
        self.verify = verify
        self.username = username
        self.password = password
        self.token = None

    def login(self):
        self.session = requests.Session()
        self.session.headers["accept"] = "application/json"
        try:
            response = self.session.post(
                url=f"{self.base_rubrik_url}v1/service_account/session",
                json={"serviceAccountId": self.username, "secret": self.password},
                verify=self.verify,
            )
        except Exception as e:
            print(f"Request error: {e}")
            sys.exit(1)

        self.token = response.json().get("token")
        self.session.headers.update(
            {
                "Authorization": f"Bearer {self.token}",
            }
        )

    def delete_token(self):
        if self.token:
            try:
                r = self.session.delete(
                    url=f"{self.base_rubrik_url}v1/session/me", verify=self.verify
                )
            except Exception as e:
                print(f"Token delete error: {e}")
                sys.exit(1)

    def get_cluster_node(self):
        r = self.session.get(
            url=f"{self.base_rubrik_url}internal/cluster/me/node", verify=self.verify
        )

        for node in r.json().get("data"):
            print(f"<<<<{node.get('id')}>>>>")
            print("<<<rubrik_node:sep(0)>>>")
            print(node)
            print("<<<<>>>>")

    def get_cluster_system_status(self):
        r = self.session.get(
            url=f"{self.base_rubrik_url}internal/cluster/me/system_status", verify=self.verify
        )
        print("<<<rubrik_cluster_system_status:sep(0)>>>")
        print(r.json())

    def get_report_summary_24_hours(self):
        r = self.session.get(
            url=f"{self.base_rubrik_url}internal/report/compliance_summary_24_hours",
            verify=self.verify,
        )
        print("<<<rubrik_cluster_compliance_24_hours:sep(0)>>>")
        print(r.json())

    def get_cluster_hardware_health(self):
        r = self.session.get(
            url=f"{self.base_rubrik_url}internal/cluster/me/hardware_health", verify=self.verify
        )

        #print(r.json())
        for hostname, data in r.json().items():
            print(f"<<<<{hostname}>>>>")
            print("<<<rubrik_node_hardware_health:sep(0)>>>")
            print(data)
            print("<<<<>>>>")

    def get_cluster_disk(self):
        r = self.session.get(
            url=f"{self.base_rubrik_url}internal/cluster/me/disk", verify=self.verify
        )

        cluster_out = {}

        for node in r.json().get("data"):
            cluster_out.setdefault(node.get("nodeId", "").split(":::")[-1], []).append(node)
        for hostname, data in cluster_out.items():
            print(f"<<<<{hostname}>>>>")
            print("<<<rubrik_node_disk:sep(0)>>>")
            print(data)
            print("<<<<>>>>")


def main(argv=None):
    args = parse_arguments(argv)
    if not args.secret:
        sys.exit(0)

    api = RubrikRestApi(
        username=args.user,
        password=args.secret,
        verify=args.verify_ssl,
        hostname=args.hostname,
    )

    api.login()
    try:
        api.get_cluster_system_status()
        api.get_report_summary_24_hours()
        api.get_cluster_node()
        api.get_cluster_disk()
        api.get_cluster_hardware_health()
    except:
        pass
    finally:
        api.delete_token()

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
